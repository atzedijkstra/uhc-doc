###########################################################################################
# this file
###########################################################################################

UHCDOC_MK_SHARED_MKF								:= $(UHCDOC_MK_PREFIX)shared.mk

###########################################################################################
# Shared makefile stuff
###########################################################################################

.SUFFIXES:
.SUFFIXES: .pdf .tex .bib .html .lhs .sty .lag .cag .chs

###########################################################################################
# Check whether tools are missing
###########################################################################################

EXIT_IF_ABSENT_LIB_OR_TOOL		:= @EXIT_IF_ABSENT_LIB_OR_TOOL@

###########################################################################################
# use of ruler depents on variant
###########################################################################################

EHC_CFG_USE_RULER						:= $(filter $(EHC_VARIANT),$(EHC_PUB_RULER_VARIANTS))

###########################################################################################
# Locations in source, build, install, distribution
###########################################################################################

# suffix for build + (temporary) install locations + package names
EHC_BUILD_SUFFIX	:= @EHC_BUILD_SUFFIX@
ifneq ($(EHC_BUILD_SUFFIX),)
EHC_BUILD_SUFFIX_DASH					:= -$(EHC_BUILD_SUFFIX)
endif

# location for binaries
UHCDOC_BIN_PREFIX	:= $(UHCDOC_TOP_PREFIX)bin/
BINABS_PREFIX		:= $(TOPABS_PREFIX)bin/

# location for haddock
HDOC_PREFIX			:= $(UHCDOC_TOP_PREFIX)hdoc/
HDOCABS_PREFIX		:= $(TOPABS_PREFIX)hdoc/

# location for building
UHCDOC_BLD_PREFIX		:= $(UHCDOC_TOP_PREFIX)build$(EHC_BUILD_SUFFIX_DASH)/
BLD_BIN_PREFIX			:= $(UHCDOC_BLD_PREFIX)bin/
BLD_LIBUTIL_PREFIX		:= $(UHCDOC_BLD_PREFIX)libutil/

# location for doc (end products)
DOC_PREFIX			:= $(UHCDOC_TOP_PREFIX)doc/

###########################################################################################
# Commands
###########################################################################################

# compilers and tools used
AGC							:= @UUAGC_CMD@
SHUFFLE						:= @SHUFFLE_CMD@
RULER1						:= @RULER_PROTO_CMD@
RULER2						:= @RULER_CMD@
UHC							:= @UHC_CMD@
GHC							:= @GHC_CMD@
GHC1						:= @GHC_CMD1@
GHC_VERSION         		:= @GHC_VERSION@
CABAL						:= @CABAL_CMD@
HADDOCK						:= @HADDOCK_CMD@
HADDOCK_VERSION     		:= @HADDOCK_VERSION@
GCC							:= @GCC_CMD@
OPEN_FOR_EDIT				:= bbedit
STRIP						:= $(STRIP_CMD)
CAT							:= @CAT_CMD@

#tool existence
ifeq (@RULER_EXISTS@,yes)
RULER_EXISTS				:= yes
else
# just leave empty
RULER_EXISTS				:= 
endif

# lhs2TeX
LHS2TEX_ENV					:= $(LHS2TEX)
LHS2TEX_CMD					:= LHS2TEX=".$(PATHS_SEP)../../$(FMT_SRC_PREFIX)$(PATHS_SEP)$(LHS2TEX_ENV)" lhs2TeX

# latex
LATEX_ENV					:= $(TEXINPUTS)
LATEXMK						:= TEXINPUTS=".$(PATHS_SEP_COL)../../$(LATEX_SRC_PREFIX)$(PATHS_SEP_COL)$(LATEX_EHC_SUBDIRS)$(LATEX_ENV)" latexmk -pdf
PDFLATEX					:= TEXINPUTS=".$(PATHS_SEP_COL)../../$(LATEX_SRC_PREFIX)$(PATHS_SEP_COL)$(LATEX_EHC_SUBDIRS)$(LATEX_ENV)" pdflatex
BIBTEX						:= BSTINPUTS=".$(PATHS_SEP_COL)../../$(LATEX_SRC_PREFIX)$(PATHS_SEP_COL)$(LATEX_ENV)" BIBINPUTS=".$(PATHS_SEP_COL)../../$(LATEX_SRC_PREFIX)$(LATEX_ENV)" bibtex
MAKEINDEX					:= makeindex

# shuffle
SHUFFLE_HS_DFLT				:= $(SHUFFLE) --hs --preamble=no --lhs2tex=no --line=yes --compiler=$(GHC_VERSION)
SHUFFLE_HS_ASIS				:= $(SHUFFLE) --plain --preamble=no --lhs2tex=no --line=yes --compiler=$(GHC_VERSION)
SHUFFLE_HS					:= $(SHUFFLE_HS_DFLT)
SHUFFLE_HS_PRE				:= $(SHUFFLE) --hs --preamble=yes --lhs2tex=no --line=yes --compiler=$(GHC_VERSION)
SHUFFLE_AG					:= $(SHUFFLE) --ag --preamble=no --lhs2tex=no --line=no --compiler=$(GHC_VERSION)
SHUFFLE_AG_PRE				:= $(SHUFFLE) --ag --preamble=yes --lhs2tex=no --line=no --compiler=$(GHC_VERSION)
SHUFFLE_PLAIN				:= $(SHUFFLE) --plain --preamble=no --lhs2tex=no --line=no
SHUFFLE_C					:= $(SHUFFLE_PLAIN)
SHUFFLE_JAVA				:= $(SHUFFLE_PLAIN)
SHUFFLE_JS					:= $(SHUFFLE_PLAIN)

# misc
# $1: files to md5
ifneq (@MD5_CMD@,)
FUN_MD5						= cat $(1) | @MD5_CMD@
else
FUN_MD5						= echo -n "no md5"
endif

###########################################################################################
# Regular options to commands
###########################################################################################

# GHC options
GHC_OPTS_GENERAL						:= @GHC_GEN_OPTIONS@
GHC_OPTS_WHEN_EHC						:= $(GHC_OPTS_GENERAL) @GHC_EHC_OPTIONS@
GHC_OPTS								:= $(OPT_GHC_STANDARD_PACKAGES) -package uulib -package uhc-util $(GHC_OPTS_GENERAL)
GHC_OPTS_OPTIM							:= -O2

# HADDOCK options
HADDOCK_OPTS							:= 

# SHUFFLE options
SHUFFLE_OPTS_WHEN_EHC					:= @SHUFFLE_EHC_OPTIONS@
SHUFFLE_OPTS_WHEN_UHC					:= --agmodheader=yes

# UUAGC options
UUAGC_OPTS_WHEN_EHC						:= @UUAGC_OPTIONS@
UUAGC_OPTS_WHEN_EHC_AST_DATA			:= @UUAGC_EHC_AST_OPTIONS@ --datarecords
UUAGC_OPTS_WHEN_EHC_AST_SEM				:= @UUAGC_EHC_SEM_OPTIONS@

# UUAGC options for production version (i.e. uhc, ehc variant >= $(EHC_PREL_VARIANT))
UUAGC_OPTS_WHEN_UHC						:=
UUAGC_OPTS_WHEN_UHC_AST_DATA			:= --strictdata --datarecords
#UUAGC_OPTS_WHEN_UHC_AST_SEM				:= --Wignore --strictwrap -O
UUAGC_OPTS_WHEN_UHC_AST_SEM				:= --strictwrap -O

# GCC options
GCC_OPTS_WHEN_EHC						:= @CC_STD_FLAG@ @GCC_EHC_OPTIONS@ -fomit-frame-pointer

# CPP options
CPP_OPTS_WHEN_EHC						:= @CPP_EHC_OPTIONS@

# cabal options
CABAL_CONFIGURE_OPTS_WHEN_EHC			:= @CABAL_CONFIGURE_OPTIONS@
CABAL_SETUP_OPTS						:= --ghc --with-compiler=$(GHC1) $(CABAL_CONFIGURE_OPTS_WHEN_EHC)
CABAL_OPT_ALLOW_UNDECIDABLE_INSTANCES 	:= @CABAL_OPT_ALLOW_UNDECIDABLE_INSTANCES@

# lhs2tex options
LHS2TEX_OPTS_DFLT						:= 
LHS2TEX_OPTS_POLY						:= $(LHS2TEX_OPTS_DFLT) --poly
LHS2TEX_OPTS_NEWC						:= $(LHS2TEX_OPTS_DFLT) --newcode

# ruler2 options
RULER2_OPTS_DFLT						:= $(RULER2_OPTS_VERSION)
RULER2_OPTS								:= $(RULER2_OPTS_DFLT)

###########################################################################################
# Installation configuration: options to commands, naming of libraries
###########################################################################################

# cabal options
CABAL_OPT_INSTALL_LOC 					:= --user

# prefix for library name, to make them globally unique
GHC_PKG_NAME_PREFIX						:= 

###########################################################################################
# Filter out empty files
###########################################################################################

# remove files with empty content from list of files
# $1: file list
FILTER_OUT_EMPTY_FILES		= $(if $(strip $(1)),$(shell echo $(1) | sed -e 's/\([^ ]*\)\s*/ls \1\* ;/g' | sh | sed -e 's/\s+/ /g' | sort | uniq | xargs $(SHELL_FILTER_NONEMP_FILES)),)

# FILTER_OUT_EMPTY_FILES		= $(shell echo $(1) | sed -e 's/\([^ ]*\)\.hs\s*/ls \1\*\.hs ;/g' | sh | sed -e 's/\s+/ /g' | sort | uniq | xargs $(SHELL_FILTER_NONEMP_FILES) )

###########################################################################################
# Misc
###########################################################################################

# strip dashes
# $1: dashed text
FUN_STRIP_DASH		= $(subst -,,$(1))

# date
TODAY				:= $(shell date '+%G%m%d')

# strip a '/' at the end, turning a prefix into a directory
FUN_PREFIX2DIR			= $(patsubst %/,%,$(1))

# target suffix for core
CORE_TARG_SUFFIX	:= grin2

# subst's
SUBST_BAR_IN_TT		:= sed -e '/begin{TT[^}]*}/,/end{TT[^}]*}/s/|/||/g'
SUBST_EHC			:= perl $(UHCDOC_BIN_PREFIX)substehc.pl
SUBST_LINE_CMT		:= sed -e 's/{-\# LINE[^\#]*\#-}//' -e '/{-\#  \#-}/d'
SUBST_SH			:= perl $(UHCDOC_BIN_PREFIX)substsh.pl

# indentation of (test) output
INDENT2				:= sed -e 's/^/  /'
INDENT4				:= sed -e 's/^/    /'

# make programming utils
head				= $(word 1,$(1))
tail				= $(wordlist 2,$(words $(1)),$(1))
comma				:= ,
empty				:=
space				:= $(empty) $(empty)
dollar				:= $$
ddollar				:= $(dollar)$(dollar)
cparen				:= )

# subst _ by x
# $1: text
SUBS_US_X			= $(subst _,x,$(1))

