%%[1

-------------------------------------------------------------------------
-- Views
-------------------------------------------------------------------------

viewhierarchy = D < SD < A, D < Q

-------------------------------------------------------------------------
-- Formatting, general
-------------------------------------------------------------------------

format tex subst.inh = subst.i
format tex subst.syn = subst.o
format tex body = exp.b

format ag  a -> r = TyArr (a) (r)
format tex (a) -> r = a -> r
format tex s1 $-> s2 = s1 s2
-- format tex TyAll tvar ty = forall tvar `.` ty
format ag forall tvar `.` ty = TyAll tvar ty

-------------------------------------------------------------------------
-- Externally defined
-------------------------------------------------------------------------

external TyInt forall tvara genty

-------------------------------------------------------------------------
-- Exp
-------------------------------------------------------------------------

data Exp [exp]
  view D =
      Int      [int]           i  	:: Int
    | Var      [var]           n  	:: String
    | App      [app]           f  	:: Exp
                               a  	:: Exp
    | Lam      [abs]           n  	:: String
                               exp 	:: Exp
    | Let      [let]           n  	:: String
                               exp  :: Exp
                               body :: Exp
    | Gen      [gen]           exp 	:: Exp
    | Inst     [inst]          exp 	:: Exp
  view Q =
      PIntro   [introp]        exp 	:: Exp
    | PElim    [elimp]         exp 	:: Exp

%%[[schemeExp
scheme exp =
  view D =
    holes [ node exp: Exp, env: Env, ty: Ty ]
    judgespec env :- exp : ty
%%]]
  view A =
    holes [ inh env: Env, thread subst: Subst, syn ty: Ty ]
    judgespec subst.inh ; env :- exp : ty ~> subst.syn
  view Q =
    holes [ penv: PEnv ]
    judgespec penv :=- env :- exp : ty

rulesgroup exp.onslideApp scheme exp "Basic Exp type rules" =
  rule exp.core app

rulesgroup exp.onslide scheme exp "Basic Exp type rules" =
  rule exp.core var
  rule exp.core let
  rule exp.core abs
  rule exp.core app

rulesgroup exp.onslide.sd scheme exp "Basic Exp type rules" =
  rule exp.core var
  rule exp.core let

ruleset exp.core scheme exp "Rules for Ty of Exp" =
  rule int "Int" =
    view D =
      ---
      judge R : exp = env :- i : TyInt
    view A =
      ---
      judge R : exp
        | subst.syn = subst
        | subst.inh = subst

  rule var "Var" =
    view D =
      judge V : envLookup = env :- n : pty
      ---
      judge R : exp = env :- n : pty
    view SD =
      judge I : inst = :- pty : ty
      ---
      judge R : exp
        | ty = ty
    view A =
      judge Fr : tvarvFresh = tvar
      judge I : inst 
        | tfresh = tvar
        | t = subst $-> pty
      ---
      judge R : exp
        | subst.syn = subst
        | subst.inh = subst

  rule let "Let" =
    view D =
      judge V : exp = env :- exp : pty
      judge B : exp = (n :-> pty, env) :- body : ty
      ---
      judge R : exp = env :- (let n `=` exp in body) : ty
    view SD =
      judge V : exp
        | ty = ty.n
      judge G : gen = env :- ty.n : pty
      ---
    view A =
      judge V : exp
        | subst.inh = subst
        | subst.syn = subst.n
      judge B : exp
        | subst.inh = subst.n
        | subst.syn = subst.e
      judge G : gen
        | env = subst.n $-> env
      ---
      judge R : exp
        | subst.syn = subst.e
        | subst.inh = subst

  rule abs "Lam" =
    view D =
      judge B : exp = (n :-> ty.a, env) :- exp : ty.r
      ---
      judge R : exp = env :- (\n `.` exp) : (ty.a -> ty.r)
    view A =
      judge B : exp
        | env = n :-> tvar, env
        | ty = ty.r
        | subst.inh = subst
        | subst.syn = subst.e
      judge Fr : tvarvFresh = tvar
      ---
      judge R : exp
        | ty = (subst.e $-> tvar) -> ty.r
        | subst.syn = subst.e
        | subst.inh = subst

%%[[ruleAppViewD
  rule app "App" =
    view D =
      judge F : exp = env :- f : (ty.a -> ty.r)
      judge A : exp = env :- a : ty.a
      -
      judge R : exp = env :- (f ^^ a) : ty.r
%%]]
%%[[ruleAppViewA
    view A =
      judge F : exp
        | ty = ty.f
        | subst.inh = subst
        | subst.syn = subst.f
      judge A : exp
        | ty = ty.a
        | subst.inh = subst.f
        | subst.syn = subst.a
      judge Fr : tvarvFresh = tvar
      judge U : unify = (subst.a $-> ty.f) === (ty.a -> tvar) ~> subst.u
      -
      judge R : exp
        | ty = subst.u $-> tvar
        | subst.syn = subst.u $-> subst.a
        | subst.inh = subst
%%]]


ruleset exp.gen scheme exp "Gen/Inst rules for Ty of Exp" =
  rule gen "Gen" =
    view D =
      judge Pr: pred = (tvar `notElem` ftv (env))
      judge A : exp = env :- exp : ty
      ---
      judge R : exp = env :- exp : (forall tvar `.` ty)
    view Q =
      judge Pr: pred 
        | pred = tvar `notElem` (ftv (env) `union` ftv (penv))
      ---

  rule inst "Inst" =
    view D =
      judge Fr : tvarvFresh = tvara
      judge A : exp = env :- exp : (forall tvarb `.` ty)
      ---
      judge R : exp = env :- exp : (([tvarb :-> tvara]) $-> ty)


ruleset exp.pred scheme exp "Elim/Intro predicate rules for Ty of Exp" =
  rule introp "PIntro" =
    view Q =
      judge A : exp = (penv, pred) :=- env :- exp : qty
      ---
      judge R : exp = penv :=- env :- exp : (pred => qty)

  rule elimp "PElim" =
    view Q =
      judge A : exp = penv :=- env :- exp : (pred => qty)
      judge E : entails = penv ::- pred
      ---
      judge R : exp = penv :=- env :- exp : qty

-------------------------------------------------------------------------
-- Entailment
-------------------------------------------------------------------------

relation entails =
  view Q =
    holes [ penv: PEnv, pred: Pred | | ]
    judgespec penv ::- pred

-------------------------------------------------------------------------
-- Arbitrary pred
-------------------------------------------------------------------------

relation pred =
  view D =
    holes [ | | pred: X ]
    judgespec pred

-------------------------------------------------------------------------
-- Fresh var
-------------------------------------------------------------------------

relation notFreeIn =
  view D =
    holes [ env: Env | | tvar: Ty ]
    judgespec tvar `notFreeIn` env
    judgeuse tex tvarv (text "fresh")

relation tvarvFresh =
  view D =
    holes [ | | tvarv: Ty ]
    judgespec tvarv
    judgeuse tex tvarv (text "fresh")
  view A =
    judgeuse ag tvarv `=` mkTyVar unique

-------------------------------------------------------------------------
-- Unification
-------------------------------------------------------------------------

relation unify =
  view A =
    holes [ x: Ty, y: Ty, subst: Subst ]
    judgespec x === y ~> subst
    judgeuse ag  (subst,errUnify) `=` unify (x) (y)

-------------------------------------------------------------------------
-- Generalization, instantiation
-------------------------------------------------------------------------

-- format ag def genty env ty = gen (ftv (env)) (ty)

relation gen =
  view SD =
    holes [ env: Env, t: Ty, tgen: Ty ]
    judgespec env :- t : tgen
    judgeuse tex env :-.."gen" t : tgen
  view Q =
    holes [ penv: PEnv ]
    judgespec penv, env :- t : tgen
    judgeuse tex penv, env :-.."gen" t : tgen
  view A =
    judgeuse ag  (retain tgen) `=` gen (ftv (env)) (t)

relation inst =
  view SD =
    holes [ t: Ty, tinst: Ty ]
    judgespec :- t : tinst
    judgeuse tex :-.."inst" t : tinst
  view A =
    holes [ tfresh: Ty ]
    judgespec tfresh :- t : tinst
    judgeuse tex tfresh :-.."inst" t : tinst
    judgeuse ag  tinst `=` inst (tfresh) (t)

-------------------------------------------------------------------------
-- Binding from an Env
-------------------------------------------------------------------------

format ag def  n :-> t , e = envAdd (n) (t) (e)
format tex  n :-> t , e = e ^ [n :-> t]

relation envLookup =
  view D =
    holes [ nm: Nm, env: Env | | ty: Ty ]
    judgespec env :- nm : ty
    judgeuse tex  nm :-> ty `elem` env
    judgeuse ag  (ty,errLookup) `=` envLookup (nm) (env)

%%]
